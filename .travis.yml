language: cpp

matrix:
  include:

    # Linux C++14 GCC builds
    - os: linux
      compiler: gcc
      addons: &gcc6
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-6']
      env: COMPILER='g++-6' BUILD_TYPE='Release'

    - os: linux
      compiler: gcc
      addons: *gcc6
      env: COMPILER='g++-6' BUILD_TYPE='Debug'

    # Linux C++14 Clang builds
    - os: linux
      compiler: clang
      addons: &clang38
        apt:
          sources: ['llvm-toolchain-precise-3.8', 'ubuntu-toolchain-r-test']
          packages: ['clang-3.8']
      env: COMPILER='clang++-3.8' BUILD_TYPE='Release'

    - os: linux
      compiler: clang
      addons: *clang38
      env: COMPILER='clang++-3.8' BUILD_TYPE='Debug'

    # OSX C++14 Clang Builds

    - os: osx
      osx_image: xcode8.3
      compiler: clang
      env: COMPILER='clang++' BUILD_TYPE='Debug'

    - os: osx
      osx_image: xcode8.3
      compiler: clang
      env: COMPILER='clang++' BUILD_TYPE='Release'

# Caching step
cache: 
- directories:
  - $HOME/.cache

addons:
  apt:
    packages: lcov

install:
- DEPS_DIR="$HOME/.cache"
- mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}
- |
  if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
    CMAKE_URL="http://www.cmake.org/files/v3.3/cmake-3.3.2-Linux-x86_64.tar.gz"
    mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
    export PATH=${DEPS_DIR}/cmake/bin:${PATH}
  elif [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
    which cmake || brew install cmake
  fi
- wget ftp://ftp.gnu.org/gnu/gsl/gsl-2.7.1.tar.gz
- tar -zxvf gsl-2.7.1.tar.gz
- cd gsl-2.7.1
- mkdir ${DEPS_DIR}/gsl
- ./configure --prefix=${DEPS_DIR}/gsl
- make
- make check
- make install
  

before_script:
- mkdir -p build && cd build
- cmake -DCODE_COVERAGE=ON -DCMAKE_BUILD_TYPE=${BUILD_TYPE} 

script:
- cmake --build . --config ${BUILD_TYPE} -- -j $(nproc)
- ctest -j $(nproc) --output-on-failure

after_success:
# Create lcov report
# capture coverage info
- lcov --directory . --capture --output-file coverage.info
# filter out system and extra files.
# To also not include test code in coverage add them with full path to the patterns: '*/tests/*'
- lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
# output coverage data for debugging (optional)
- lcov --list coverage.info
# Uploading to CodeCov
# '-f' specifies file(s) to use and disables manual coverage gathering and file search which has already been done above
- bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"